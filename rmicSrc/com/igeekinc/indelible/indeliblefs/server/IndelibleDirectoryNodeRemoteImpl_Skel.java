// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.indelible.indeliblefs.server;

public final class IndelibleDirectoryNodeRemoteImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.CreateDirectoryInfoRemote createChildDirectory(java.lang.String)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildFile(java.lang.String, com.igeekinc.indelible.oid.IndelibleFSObjectID, boolean)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildFile(java.lang.String, com.igeekinc.util.FilePath, boolean)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildFile(java.lang.String, java.util.HashMap, boolean)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildFile(java.lang.String, boolean)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildLink(java.lang.String, com.igeekinc.indelible.oid.IndelibleFSObjectID)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.CreateSymlinkInfoRemote createChildSymlink(java.lang.String, java.lang.String, boolean)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.DeleteFileInfoRemote deleteChild(java.lang.String)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.DeleteFileInfoRemote deleteChildDirectory(java.lang.String)"),
	new java.rmi.server.Operation("void deleteFork(java.lang.String)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFileNodeRemote getChildNode(java.lang.String)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.IndelibleNodeInfo getChildNodeInfo(java.lang.String[])[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFSForkRemote getFork(java.lang.String, boolean)"),
	new java.rmi.server.Operation("java.util.Map getMetaDataResource(java.lang.String)"),
	new java.rmi.server.Operation("int getNumChildren()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote getObjectForVersion(com.igeekinc.indelible.indeliblefs.core.IndelibleVersion, com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.IndelibleFSObjectID getObjectID()"),
	new java.rmi.server.Operation("int getReferenceCount()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleVersion getVersion()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.IndelibleFSObjectID getVolumeID()"),
	new java.rmi.server.Operation("boolean isDirectory()"),
	new java.rmi.server.Operation("boolean isFile()"),
	new java.rmi.server.Operation("long lastModified()"),
	new java.rmi.server.Operation("long lengthWithChildren()"),
	new java.rmi.server.Operation("java.lang.String list()[]"),
	new java.rmi.server.Operation("java.lang.String listForkNames()[]"),
	new java.rmi.server.Operation("java.lang.String listMetaDataResources()[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleVersionIterator listVersions()"),
	new java.rmi.server.Operation("void release()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote setMetaDataResource(java.lang.String, java.util.Map)"),
	new java.rmi.server.Operation("long totalLength()")
    };
    
    private static final long interfaceHash = 1346330604920155154L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	com.igeekinc.indelible.indeliblefs.server.IndelibleDirectoryNodeRemoteImpl server = (com.igeekinc.indelible.indeliblefs.server.IndelibleDirectoryNodeRemoteImpl) obj;
	switch (opnum) {
	case 0: // createChildDirectory(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.CreateDirectoryInfoRemote $result = server.createChildDirectory($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // createChildFile(String, IndelibleFSObjectID, boolean)
	{
	    java.lang.String $param_String_1;
	    com.igeekinc.indelible.oid.IndelibleFSObjectID $param_IndelibleFSObjectID_2;
	    boolean $param_boolean_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_IndelibleFSObjectID_2 = (com.igeekinc.indelible.oid.IndelibleFSObjectID) in.readObject();
		$param_boolean_3 = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote $result = server.createChildFile($param_String_1, $param_IndelibleFSObjectID_2, $param_boolean_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // createChildFile(String, FilePath, boolean)
	{
	    java.lang.String $param_String_1;
	    com.igeekinc.util.FilePath $param_FilePath_2;
	    boolean $param_boolean_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_FilePath_2 = (com.igeekinc.util.FilePath) in.readObject();
		$param_boolean_3 = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote $result = server.createChildFile($param_String_1, $param_FilePath_2, $param_boolean_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // createChildFile(String, HashMap, boolean)
	{
	    java.lang.String $param_String_1;
	    java.util.HashMap $param_HashMap_2;
	    boolean $param_boolean_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_HashMap_2 = (java.util.HashMap) in.readObject();
		$param_boolean_3 = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote $result = server.createChildFile($param_String_1, $param_HashMap_2, $param_boolean_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // createChildFile(String, boolean)
	{
	    java.lang.String $param_String_1;
	    boolean $param_boolean_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_boolean_2 = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote $result = server.createChildFile($param_String_1, $param_boolean_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // createChildLink(String, IndelibleFSObjectID)
	{
	    java.lang.String $param_String_1;
	    com.igeekinc.indelible.oid.IndelibleFSObjectID $param_IndelibleFSObjectID_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_IndelibleFSObjectID_2 = (com.igeekinc.indelible.oid.IndelibleFSObjectID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote $result = server.createChildLink($param_String_1, $param_IndelibleFSObjectID_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // createChildSymlink(String, String, boolean)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    boolean $param_boolean_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_boolean_3 = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.CreateSymlinkInfoRemote $result = server.createChildSymlink($param_String_1, $param_String_2, $param_boolean_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // deleteChild(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.DeleteFileInfoRemote $result = server.deleteChild($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // deleteChildDirectory(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.DeleteFileInfoRemote $result = server.deleteChildDirectory($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 9: // deleteFork(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.deleteFork($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 10: // getChildNode(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFileNodeRemote $result = server.getChildNode($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 11: // getChildNodeInfo(String[])
	{
	    java.lang.String[] $param_arrayOf_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_arrayOf_String_1 = (java.lang.String[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.IndelibleNodeInfo[] $result = server.getChildNodeInfo($param_arrayOf_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 12: // getFork(String, boolean)
	{
	    java.lang.String $param_String_1;
	    boolean $param_boolean_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_boolean_2 = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFSForkRemote $result = server.getFork($param_String_1, $param_boolean_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 13: // getMetaDataResource(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.Map $result = server.getMetaDataResource($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 14: // getNumChildren()
	{
	    call.releaseInputStream();
	    int $result = server.getNumChildren();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 15: // getObjectForVersion(IndelibleVersion, RetrieveVersionFlags)
	{
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_1;
	    com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags $param_RetrieveVersionFlags_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_IndelibleVersion_1 = (com.igeekinc.indelible.indeliblefs.core.IndelibleVersion) in.readObject();
		$param_RetrieveVersionFlags_2 = (com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote $result = server.getObjectForVersion($param_IndelibleVersion_1, $param_RetrieveVersionFlags_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 16: // getObjectID()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.oid.IndelibleFSObjectID $result = server.getObjectID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 17: // getReferenceCount()
	{
	    call.releaseInputStream();
	    int $result = server.getReferenceCount();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 18: // getVersion()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $result = server.getVersion();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 19: // getVolumeID()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.oid.IndelibleFSObjectID $result = server.getVolumeID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 20: // isDirectory()
	{
	    call.releaseInputStream();
	    boolean $result = server.isDirectory();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 21: // isFile()
	{
	    call.releaseInputStream();
	    boolean $result = server.isFile();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 22: // lastModified()
	{
	    call.releaseInputStream();
	    long $result = server.lastModified();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 23: // lengthWithChildren()
	{
	    call.releaseInputStream();
	    long $result = server.lengthWithChildren();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 24: // list()
	{
	    call.releaseInputStream();
	    java.lang.String[] $result = server.list();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 25: // listForkNames()
	{
	    call.releaseInputStream();
	    java.lang.String[] $result = server.listForkNames();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 26: // listMetaDataResources()
	{
	    call.releaseInputStream();
	    java.lang.String[] $result = server.listMetaDataResources();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 27: // listVersions()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersionIterator $result = server.listVersions();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 28: // release()
	{
	    call.releaseInputStream();
	    server.release();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 29: // setMetaDataResource(String, Map)
	{
	    java.lang.String $param_String_1;
	    java.util.Map $param_Map_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Map_2 = (java.util.Map) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote $result = server.setMetaDataResource($param_String_1, $param_Map_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 30: // totalLength()
	{
	    call.releaseInputStream();
	    long $result = server.totalLength();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
