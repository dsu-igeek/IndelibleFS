// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.indelible.indeliblefs.server;

public final class IndelibleFSForkRemoteImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void appendDataDescriptor(com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor)"),
	new java.rmi.server.Operation("long extend(long)"),
	new java.rmi.server.Operation("void flush()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor getDataDescriptor(long, long)"),
	new java.rmi.server.Operation("java.lang.String getName()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.CASIdentifier getSegmentIDs()[]"),
	new java.rmi.server.Operation("long length()"),
	new java.rmi.server.Operation("long truncate(long)"),
	new java.rmi.server.Operation("void writeDataDescriptor(long, com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor)")
    };
    
    private static final long interfaceHash = 6005166541032267328L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	com.igeekinc.indelible.indeliblefs.server.IndelibleFSForkRemoteImpl server = (com.igeekinc.indelible.indeliblefs.server.IndelibleFSForkRemoteImpl) obj;
	switch (opnum) {
	case 0: // appendDataDescriptor(NetworkDataDescriptor)
	{
	    com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $param_NetworkDataDescriptor_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_NetworkDataDescriptor_1 = (com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.appendDataDescriptor($param_NetworkDataDescriptor_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // extend(long)
	{
	    long $param_long_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_long_1 = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    long $result = server.extend($param_long_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // flush()
	{
	    call.releaseInputStream();
	    server.flush();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // getDataDescriptor(long, long)
	{
	    long $param_long_1;
	    long $param_long_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_long_1 = in.readLong();
		$param_long_2 = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $result = server.getDataDescriptor($param_long_1, $param_long_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // getName()
	{
	    call.releaseInputStream();
	    java.lang.String $result = server.getName();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // getSegmentIDs()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.uniblock.CASIdentifier[] $result = server.getSegmentIDs();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // length()
	{
	    call.releaseInputStream();
	    long $result = server.length();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // truncate(long)
	{
	    long $param_long_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_long_1 = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    long $result = server.truncate($param_long_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // writeDataDescriptor(long, NetworkDataDescriptor)
	{
	    long $param_long_1;
	    com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $param_NetworkDataDescriptor_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_long_1 = in.readLong();
		$param_NetworkDataDescriptor_2 = (com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.writeDataDescriptor($param_long_1, $param_NetworkDataDescriptor_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
