// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.indelible.indeliblefs.server;

public final class IndelibleFSVolumeRemoteImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void addSnapshot(com.igeekinc.indelible.indeliblefs.core.IndelibleSnapshotInfo)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.DeleteFileInfoRemote deleteObjectByPath(com.igeekinc.util.FilePath)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleSnapshotInfo getInfoForSnapshot(com.igeekinc.indelible.indeliblefs.core.IndelibleVersion)"),
	new java.rmi.server.Operation("java.util.Map getMetaDataResource(java.lang.String)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote getObjectByID(com.igeekinc.indelible.oid.IndelibleFSObjectID)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFileNodeRemote getObjectByPath(com.igeekinc.util.FilePath)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote getObjectForVersion(com.igeekinc.indelible.indeliblefs.core.IndelibleVersion, com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.IndelibleFSObjectID getObjectID()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleDirectoryNodeRemote getRoot()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleVersion getVersion()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.IndelibleFSObjectID getVolumeID()"),
	new java.rmi.server.Operation("java.lang.String getVolumeName()"),
	new java.rmi.server.Operation("java.lang.String listMetaDataResources()[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleSnapshotIteratorRemote listSnapshots()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleVersionIterator listVersions()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.MoveObjectInfoRemote moveObject(com.igeekinc.util.FilePath, com.igeekinc.util.FilePath)"),
	new java.rmi.server.Operation("void release()"),
	new java.rmi.server.Operation("boolean releaseSnapshot(com.igeekinc.indelible.indeliblefs.core.IndelibleVersion)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote setMetaDataResource(java.lang.String, java.util.Map)"),
	new java.rmi.server.Operation("void setVolumeName(java.lang.String)")
    };
    
    private static final long interfaceHash = 2188626197793157822L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	com.igeekinc.indelible.indeliblefs.server.IndelibleFSVolumeRemoteImpl server = (com.igeekinc.indelible.indeliblefs.server.IndelibleFSVolumeRemoteImpl) obj;
	switch (opnum) {
	case 0: // addSnapshot(IndelibleSnapshotInfo)
	{
	    com.igeekinc.indelible.indeliblefs.core.IndelibleSnapshotInfo $param_IndelibleSnapshotInfo_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_IndelibleSnapshotInfo_1 = (com.igeekinc.indelible.indeliblefs.core.IndelibleSnapshotInfo) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.addSnapshot($param_IndelibleSnapshotInfo_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // deleteObjectByPath(FilePath)
	{
	    com.igeekinc.util.FilePath $param_FilePath_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FilePath_1 = (com.igeekinc.util.FilePath) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.DeleteFileInfoRemote $result = server.deleteObjectByPath($param_FilePath_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // getInfoForSnapshot(IndelibleVersion)
	{
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_IndelibleVersion_1 = (com.igeekinc.indelible.indeliblefs.core.IndelibleVersion) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.core.IndelibleSnapshotInfo $result = server.getInfoForSnapshot($param_IndelibleVersion_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // getMetaDataResource(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.Map $result = server.getMetaDataResource($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // getObjectByID(IndelibleFSObjectID)
	{
	    com.igeekinc.indelible.oid.IndelibleFSObjectID $param_IndelibleFSObjectID_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_IndelibleFSObjectID_1 = (com.igeekinc.indelible.oid.IndelibleFSObjectID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote $result = server.getObjectByID($param_IndelibleFSObjectID_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // getObjectByPath(FilePath)
	{
	    com.igeekinc.util.FilePath $param_FilePath_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FilePath_1 = (com.igeekinc.util.FilePath) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFileNodeRemote $result = server.getObjectByPath($param_FilePath_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // getObjectForVersion(IndelibleVersion, RetrieveVersionFlags)
	{
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_1;
	    com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags $param_RetrieveVersionFlags_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_IndelibleVersion_1 = (com.igeekinc.indelible.indeliblefs.core.IndelibleVersion) in.readObject();
		$param_RetrieveVersionFlags_2 = (com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote $result = server.getObjectForVersion($param_IndelibleVersion_1, $param_RetrieveVersionFlags_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // getObjectID()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.oid.IndelibleFSObjectID $result = server.getObjectID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // getRoot()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleDirectoryNodeRemote $result = server.getRoot();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 9: // getVersion()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $result = server.getVersion();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 10: // getVolumeID()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.oid.IndelibleFSObjectID $result = server.getVolumeID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 11: // getVolumeName()
	{
	    call.releaseInputStream();
	    java.lang.String $result = server.getVolumeName();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 12: // listMetaDataResources()
	{
	    call.releaseInputStream();
	    java.lang.String[] $result = server.listMetaDataResources();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 13: // listSnapshots()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleSnapshotIteratorRemote $result = server.listSnapshots();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 14: // listVersions()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersionIterator $result = server.listVersions();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 15: // moveObject(FilePath, FilePath)
	{
	    com.igeekinc.util.FilePath $param_FilePath_1;
	    com.igeekinc.util.FilePath $param_FilePath_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FilePath_1 = (com.igeekinc.util.FilePath) in.readObject();
		$param_FilePath_2 = (com.igeekinc.util.FilePath) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.MoveObjectInfoRemote $result = server.moveObject($param_FilePath_1, $param_FilePath_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 16: // release()
	{
	    call.releaseInputStream();
	    server.release();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 17: // releaseSnapshot(IndelibleVersion)
	{
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_IndelibleVersion_1 = (com.igeekinc.indelible.indeliblefs.core.IndelibleVersion) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.releaseSnapshot($param_IndelibleVersion_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 18: // setMetaDataResource(String, Map)
	{
	    java.lang.String $param_String_1;
	    java.util.Map $param_Map_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Map_2 = (java.util.Map) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote $result = server.setMetaDataResource($param_String_1, $param_Map_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 19: // setVolumeName(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.setVolumeName($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
