// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.indelible.indeliblefs.server;

public final class IndelibleFSServerConnectionImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void addClientSessionAuthentication(com.igeekinc.indelible.indeliblefs.security.SessionAuthentication)"),
	new java.rmi.server.Operation("void close()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleVersion commit()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleVersion commitAndSnapshot(java.util.HashMap)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFSVolumeRemote createVolume(java.util.Properties)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.security.EntityAuthentication getClientEntityAuthentication()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.security.EntityAuthentication getServerEntityAuthentication()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.security.SessionAuthentication getSessionAuthentication()"),
	new java.rmi.server.Operation("boolean inTransaction()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.IndelibleFSObjectID listVolumes()[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFSVolumeRemote retrieveVolume(com.igeekinc.indelible.oid.IndelibleFSObjectID)"),
	new java.rmi.server.Operation("void rollback()"),
	new java.rmi.server.Operation("void startTransaction()")
    };
    
    private static final long interfaceHash = 6027925610321205441L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	com.igeekinc.indelible.indeliblefs.server.IndelibleFSServerConnectionImpl server = (com.igeekinc.indelible.indeliblefs.server.IndelibleFSServerConnectionImpl) obj;
	switch (opnum) {
	case 0: // addClientSessionAuthentication(SessionAuthentication)
	{
	    com.igeekinc.indelible.indeliblefs.security.SessionAuthentication $param_SessionAuthentication_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_SessionAuthentication_1 = (com.igeekinc.indelible.indeliblefs.security.SessionAuthentication) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.addClientSessionAuthentication($param_SessionAuthentication_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // close()
	{
	    call.releaseInputStream();
	    server.close();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // commit()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $result = server.commit();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // commitAndSnapshot(HashMap)
	{
	    java.util.HashMap $param_HashMap_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_HashMap_1 = (java.util.HashMap) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $result = server.commitAndSnapshot($param_HashMap_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // createVolume(Properties)
	{
	    java.util.Properties $param_Properties_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Properties_1 = (java.util.Properties) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFSVolumeRemote $result = server.createVolume($param_Properties_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // getClientEntityAuthentication()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.security.EntityAuthentication $result = server.getClientEntityAuthentication();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // getServerEntityAuthentication()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.security.EntityAuthentication $result = server.getServerEntityAuthentication();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // getSessionAuthentication()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.security.SessionAuthentication $result = server.getSessionAuthentication();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // inTransaction()
	{
	    call.releaseInputStream();
	    boolean $result = server.inTransaction();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 9: // listVolumes()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.oid.IndelibleFSObjectID[] $result = server.listVolumes();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 10: // retrieveVolume(IndelibleFSObjectID)
	{
	    com.igeekinc.indelible.oid.IndelibleFSObjectID $param_IndelibleFSObjectID_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_IndelibleFSObjectID_1 = (com.igeekinc.indelible.oid.IndelibleFSObjectID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFSVolumeRemote $result = server.retrieveVolume($param_IndelibleFSObjectID_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 11: // rollback()
	{
	    call.releaseInputStream();
	    server.rollback();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 12: // startTransaction()
	{
	    call.releaseInputStream();
	    server.startTransaction();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
