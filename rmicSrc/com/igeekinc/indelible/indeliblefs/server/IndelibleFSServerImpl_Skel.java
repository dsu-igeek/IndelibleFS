// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.indelible.indeliblefs.server;

public final class IndelibleFSServerImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.remote.RemoteCASServer getCASServer()"),
	new java.rmi.server.Operation("java.net.InetSocketAddress getMoverAddresses(com.igeekinc.indelible.oid.EntityID)[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.EntityID getSecurityServerID()"),
	new java.rmi.server.Operation("java.net.InetAddress getServerAddress()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.EntityID getServerID()"),
	new java.rmi.server.Operation("int getServerPort()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.server.IndelibleFSServerConnectionRemote open()"),
	new java.rmi.server.Operation("void testReverseConnection(com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor)")
    };
    
    private static final long interfaceHash = 3549874107903045801L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	com.igeekinc.indelible.indeliblefs.server.IndelibleFSServerImpl server = (com.igeekinc.indelible.indeliblefs.server.IndelibleFSServerImpl) obj;
	switch (opnum) {
	case 0: // getCASServer()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.uniblock.remote.RemoteCASServer $result = server.getCASServer();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // getMoverAddresses(EntityID)
	{
	    com.igeekinc.indelible.oid.EntityID $param_EntityID_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_EntityID_1 = (com.igeekinc.indelible.oid.EntityID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.net.InetSocketAddress[] $result = server.getMoverAddresses($param_EntityID_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // getSecurityServerID()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.oid.EntityID $result = server.getSecurityServerID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // getServerAddress()
	{
	    call.releaseInputStream();
	    java.net.InetAddress $result = server.getServerAddress();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // getServerID()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.oid.EntityID $result = server.getServerID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // getServerPort()
	{
	    call.releaseInputStream();
	    int $result = server.getServerPort();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // open()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.server.IndelibleFSServerConnectionRemote $result = server.open();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // testReverseConnection(NetworkDataDescriptor)
	{
	    com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $param_NetworkDataDescriptor_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_NetworkDataDescriptor_1 = (com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.testReverseConnection($param_NetworkDataDescriptor_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
