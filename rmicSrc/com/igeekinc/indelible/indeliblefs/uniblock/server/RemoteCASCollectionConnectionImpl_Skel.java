// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.indelible.indeliblefs.uniblock.server;

public final class RemoteCASCollectionConnectionImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("boolean bulkReleaseSegment(com.igeekinc.indelible.oid.CASSegmentID[])[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleFSTransaction commit()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator eventsAfterID(long)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator eventsAfterTime(long)"),
	new java.rmi.server.Operation("com.igeekinc.util.async.RemoteAsyncCompletionStatus executeAsync(com.igeekinc.util.async.RemoteAsyncCommandBlock[], long)[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.remote.RemoteCASServer getCASServer()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.security.EntityAuthentication getEntityAuthentication()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator getEventsForTransaction(com.igeekinc.indelible.indeliblefs.core.IndelibleFSTransaction)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.CASCollectionID getID()"),
	new java.rmi.server.Operation("long getLastEventID()"),
	new java.rmi.server.Operation("long getLastReplicatedEventID(com.igeekinc.indelible.oid.EntityID, com.igeekinc.indelible.oid.CASCollectionID)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.CASIDDataDescriptor getMetaDataForReplication()"),
	new java.rmi.server.Operation("java.util.Map getMetaDataResource(java.lang.String)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.EntityID getMoverID()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator getTransactionEventsAfterEventID(long, int)"),
	new java.rmi.server.Operation("java.lang.String listMetaDataNames()[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.server.RemoteCASSegmentIDIterator listSegmentIDs()"),
	new java.rmi.server.Operation("boolean releaseSegment(com.igeekinc.indelible.oid.ObjectID)"),
	new java.rmi.server.Operation("void repairSegment(com.igeekinc.indelible.oid.ObjectID, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion, com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo)"),
	new java.rmi.server.Operation("void replicateMetaDataResource(com.igeekinc.indelible.indeliblefs.uniblock.CASIDDataDescriptor, com.igeekinc.indelible.indeliblefs.uniblock.CASCollectionEvent)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.CASIdentifier retrieveCASIdentifier(com.igeekinc.indelible.oid.CASSegmentID)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor retrieveSegment(com.igeekinc.indelible.indeliblefs.uniblock.CASIdentifier)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo retrieveSegment(com.igeekinc.indelible.oid.ObjectID)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo retrieveSegment(com.igeekinc.indelible.oid.ObjectID, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion, com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.SegmentInfo retrieveSegmentInfo(com.igeekinc.indelible.oid.ObjectID, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion, com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags)"),
	new java.rmi.server.Operation("void rollback()"),
	new java.rmi.server.Operation("void setMetaDataResource(java.lang.String, java.util.Map)"),
	new java.rmi.server.Operation("void startReplicatedTransaction(com.igeekinc.indelible.indeliblefs.uniblock.TransactionCommittedEvent)"),
	new java.rmi.server.Operation("void startTransaction()"),
	new java.rmi.server.Operation("void storeReplicatedSegment(com.igeekinc.indelible.oid.ObjectID, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion, com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor, com.igeekinc.indelible.indeliblefs.uniblock.CASCollectionEvent)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.CASStoreInfo storeSegment(com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor)"),
	new java.rmi.server.Operation("void storeVersionedSegment(com.igeekinc.indelible.oid.ObjectID, com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor)"),
	new java.rmi.server.Operation("boolean verifySegment(com.igeekinc.indelible.oid.ObjectID, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion, com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags)")
    };
    
    private static final long interfaceHash = -1555822600103836272L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	com.igeekinc.indelible.indeliblefs.uniblock.server.RemoteCASCollectionConnectionImpl server = (com.igeekinc.indelible.indeliblefs.uniblock.server.RemoteCASCollectionConnectionImpl) obj;
	switch (opnum) {
	case 0: // bulkReleaseSegment(CASSegmentID[])
	{
	    com.igeekinc.indelible.oid.CASSegmentID[] $param_arrayOf_CASSegmentID_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_arrayOf_CASSegmentID_1 = (com.igeekinc.indelible.oid.CASSegmentID[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean[] $result = server.bulkReleaseSegment($param_arrayOf_CASSegmentID_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // commit()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.core.IndelibleFSTransaction $result = server.commit();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // eventsAfterID(long)
	{
	    long $param_long_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_long_1 = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator $result = server.eventsAfterID($param_long_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // eventsAfterTime(long)
	{
	    long $param_long_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_long_1 = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator $result = server.eventsAfterTime($param_long_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // executeAsync(RemoteAsyncCommandBlock[], long)
	{
	    com.igeekinc.util.async.RemoteAsyncCommandBlock[] $param_arrayOf_RemoteAsyncCommandBlock_1;
	    long $param_long_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_arrayOf_RemoteAsyncCommandBlock_1 = (com.igeekinc.util.async.RemoteAsyncCommandBlock[]) in.readObject();
		$param_long_2 = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.util.async.RemoteAsyncCompletionStatus[] $result = server.executeAsync($param_arrayOf_RemoteAsyncCommandBlock_1, $param_long_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // getCASServer()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.uniblock.remote.RemoteCASServer $result = server.getCASServer();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // getEntityAuthentication()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.security.EntityAuthentication $result = server.getEntityAuthentication();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // getEventsForTransaction(IndelibleFSTransaction)
	{
	    com.igeekinc.indelible.indeliblefs.core.IndelibleFSTransaction $param_IndelibleFSTransaction_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_IndelibleFSTransaction_1 = (com.igeekinc.indelible.indeliblefs.core.IndelibleFSTransaction) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator $result = server.getEventsForTransaction($param_IndelibleFSTransaction_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // getID()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.oid.CASCollectionID $result = server.getID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 9: // getLastEventID()
	{
	    call.releaseInputStream();
	    long $result = server.getLastEventID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 10: // getLastReplicatedEventID(EntityID, CASCollectionID)
	{
	    com.igeekinc.indelible.oid.EntityID $param_EntityID_1;
	    com.igeekinc.indelible.oid.CASCollectionID $param_CASCollectionID_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_EntityID_1 = (com.igeekinc.indelible.oid.EntityID) in.readObject();
		$param_CASCollectionID_2 = (com.igeekinc.indelible.oid.CASCollectionID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    long $result = server.getLastReplicatedEventID($param_EntityID_1, $param_CASCollectionID_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 11: // getMetaDataForReplication()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.uniblock.CASIDDataDescriptor $result = server.getMetaDataForReplication();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 12: // getMetaDataResource(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.Map $result = server.getMetaDataResource($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 13: // getMoverID()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.oid.EntityID $result = server.getMoverID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 14: // getTransactionEventsAfterEventID(long, int)
	{
	    long $param_long_1;
	    int $param_int_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_long_1 = in.readLong();
		$param_int_2 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator $result = server.getTransactionEventsAfterEventID($param_long_1, $param_int_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 15: // listMetaDataNames()
	{
	    call.releaseInputStream();
	    java.lang.String[] $result = server.listMetaDataNames();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 16: // listSegmentIDs()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.server.RemoteCASSegmentIDIterator $result = server.listSegmentIDs();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 17: // releaseSegment(ObjectID)
	{
	    com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ObjectID_1 = (com.igeekinc.indelible.oid.ObjectID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.releaseSegment($param_ObjectID_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 18: // repairSegment(ObjectID, IndelibleVersion, DataVersionInfo)
	{
	    com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1;
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_2;
	    com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo $param_DataVersionInfo_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ObjectID_1 = (com.igeekinc.indelible.oid.ObjectID) in.readObject();
		$param_IndelibleVersion_2 = (com.igeekinc.indelible.indeliblefs.core.IndelibleVersion) in.readObject();
		$param_DataVersionInfo_3 = (com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.repairSegment($param_ObjectID_1, $param_IndelibleVersion_2, $param_DataVersionInfo_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 19: // replicateMetaDataResource(CASIDDataDescriptor, CASCollectionEvent)
	{
	    com.igeekinc.indelible.indeliblefs.uniblock.CASIDDataDescriptor $param_CASIDDataDescriptor_1;
	    com.igeekinc.indelible.indeliblefs.uniblock.CASCollectionEvent $param_CASCollectionEvent_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_CASIDDataDescriptor_1 = (com.igeekinc.indelible.indeliblefs.uniblock.CASIDDataDescriptor) in.readObject();
		$param_CASCollectionEvent_2 = (com.igeekinc.indelible.indeliblefs.uniblock.CASCollectionEvent) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.replicateMetaDataResource($param_CASIDDataDescriptor_1, $param_CASCollectionEvent_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 20: // retrieveCASIdentifier(CASSegmentID)
	{
	    com.igeekinc.indelible.oid.CASSegmentID $param_CASSegmentID_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_CASSegmentID_1 = (com.igeekinc.indelible.oid.CASSegmentID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.uniblock.CASIdentifier $result = server.retrieveCASIdentifier($param_CASSegmentID_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 21: // retrieveSegment(CASIdentifier)
	{
	    com.igeekinc.indelible.indeliblefs.uniblock.CASIdentifier $param_CASIdentifier_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_CASIdentifier_1 = (com.igeekinc.indelible.indeliblefs.uniblock.CASIdentifier) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $result = server.retrieveSegment($param_CASIdentifier_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 22: // retrieveSegment(ObjectID)
	{
	    com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ObjectID_1 = (com.igeekinc.indelible.oid.ObjectID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo $result = server.retrieveSegment($param_ObjectID_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 23: // retrieveSegment(ObjectID, IndelibleVersion, RetrieveVersionFlags)
	{
	    com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1;
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_2;
	    com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags $param_RetrieveVersionFlags_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ObjectID_1 = (com.igeekinc.indelible.oid.ObjectID) in.readObject();
		$param_IndelibleVersion_2 = (com.igeekinc.indelible.indeliblefs.core.IndelibleVersion) in.readObject();
		$param_RetrieveVersionFlags_3 = (com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo $result = server.retrieveSegment($param_ObjectID_1, $param_IndelibleVersion_2, $param_RetrieveVersionFlags_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 24: // retrieveSegmentInfo(ObjectID, IndelibleVersion, RetrieveVersionFlags)
	{
	    com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1;
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_2;
	    com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags $param_RetrieveVersionFlags_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ObjectID_1 = (com.igeekinc.indelible.oid.ObjectID) in.readObject();
		$param_IndelibleVersion_2 = (com.igeekinc.indelible.indeliblefs.core.IndelibleVersion) in.readObject();
		$param_RetrieveVersionFlags_3 = (com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.uniblock.SegmentInfo $result = server.retrieveSegmentInfo($param_ObjectID_1, $param_IndelibleVersion_2, $param_RetrieveVersionFlags_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 25: // rollback()
	{
	    call.releaseInputStream();
	    server.rollback();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 26: // setMetaDataResource(String, Map)
	{
	    java.lang.String $param_String_1;
	    java.util.Map $param_Map_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Map_2 = (java.util.Map) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.setMetaDataResource($param_String_1, $param_Map_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 27: // startReplicatedTransaction(TransactionCommittedEvent)
	{
	    com.igeekinc.indelible.indeliblefs.uniblock.TransactionCommittedEvent $param_TransactionCommittedEvent_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_TransactionCommittedEvent_1 = (com.igeekinc.indelible.indeliblefs.uniblock.TransactionCommittedEvent) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.startReplicatedTransaction($param_TransactionCommittedEvent_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 28: // startTransaction()
	{
	    call.releaseInputStream();
	    server.startTransaction();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 29: // storeReplicatedSegment(ObjectID, IndelibleVersion, NetworkDataDescriptor, CASCollectionEvent)
	{
	    com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1;
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_2;
	    com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $param_NetworkDataDescriptor_3;
	    com.igeekinc.indelible.indeliblefs.uniblock.CASCollectionEvent $param_CASCollectionEvent_4;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ObjectID_1 = (com.igeekinc.indelible.oid.ObjectID) in.readObject();
		$param_IndelibleVersion_2 = (com.igeekinc.indelible.indeliblefs.core.IndelibleVersion) in.readObject();
		$param_NetworkDataDescriptor_3 = (com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor) in.readObject();
		$param_CASCollectionEvent_4 = (com.igeekinc.indelible.indeliblefs.uniblock.CASCollectionEvent) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.storeReplicatedSegment($param_ObjectID_1, $param_IndelibleVersion_2, $param_NetworkDataDescriptor_3, $param_CASCollectionEvent_4);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 30: // storeSegment(NetworkDataDescriptor)
	{
	    com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $param_NetworkDataDescriptor_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_NetworkDataDescriptor_1 = (com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.uniblock.CASStoreInfo $result = server.storeSegment($param_NetworkDataDescriptor_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 31: // storeVersionedSegment(ObjectID, NetworkDataDescriptor)
	{
	    com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1;
	    com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $param_NetworkDataDescriptor_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ObjectID_1 = (com.igeekinc.indelible.oid.ObjectID) in.readObject();
		$param_NetworkDataDescriptor_2 = (com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.storeVersionedSegment($param_ObjectID_1, $param_NetworkDataDescriptor_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 32: // verifySegment(ObjectID, IndelibleVersion, RetrieveVersionFlags)
	{
	    com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1;
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_2;
	    com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags $param_RetrieveVersionFlags_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ObjectID_1 = (com.igeekinc.indelible.oid.ObjectID) in.readObject();
		$param_IndelibleVersion_2 = (com.igeekinc.indelible.indeliblefs.core.IndelibleVersion) in.readObject();
		$param_RetrieveVersionFlags_3 = (com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.verifySegment($param_ObjectID_1, $param_IndelibleVersion_2, $param_RetrieveVersionFlags_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
