// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.indelible.indeliblefs.uniblock.server;

public final class RemoteCASServerConnectionImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void addClientSessionAuthentication(com.igeekinc.indelible.indeliblefs.security.SessionAuthentication)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.server.RemoteCASCollectionConnection addCollection(com.igeekinc.indelible.oid.CASCollectionID)"),
	new java.rmi.server.Operation("void addConnectedServer(com.igeekinc.indelible.oid.EntityID, com.igeekinc.indelible.oid.EntityID)"),
	new java.rmi.server.Operation("void close()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleFSTransaction commit()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.server.RemoteCASCollectionConnection createNewCollection()"),
	new java.rmi.server.Operation("void createStoresForProperties(java.util.Properties)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator eventsAfterID(long)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator eventsAfterTime(long)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.security.EntityAuthentication getClientEntityAuthentication()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.server.RemoteCASCollectionConnection getCollection(com.igeekinc.indelible.oid.CASCollectionID)"),
	new java.rmi.server.Operation("long getLastEventID()"),
	new java.rmi.server.Operation("long getLastReplicatedEventID(com.igeekinc.indelible.oid.EntityID, com.igeekinc.indelible.oid.CASCollectionID)"),
	new java.rmi.server.Operation("java.net.InetSocketAddress getMoverAddresses(com.igeekinc.indelible.oid.EntityID)[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.EntityID getMoverID()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.EntityID getSecurityServerID()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.remote.RemoteCASServer getServer()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.security.EntityAuthentication getServerEntityAuthentication()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator getServerEventsAfterEventID(long, int)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.EntityID getServerID()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.security.SessionAuthentication getSessionAuthentication()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor getTestDescriptor()"),
	new java.rmi.server.Operation("boolean isClosed()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.CASCollectionID listCollections()[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor retrieveMetaData(java.lang.String)"),
	new java.rmi.server.Operation("void rollback()"),
	new java.rmi.server.Operation("void setupReverseMoverConnection(com.igeekinc.indelible.oid.EntityID, java.net.InetAddress, int)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleVersion startTransaction()"),
	new java.rmi.server.Operation("void storeMetaData(java.lang.String, com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor)"),
	new java.rmi.server.Operation("void testReverseConnection(com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor)")
    };
    
    private static final long interfaceHash = -4581489588260752784L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	com.igeekinc.indelible.indeliblefs.uniblock.server.RemoteCASServerConnectionImpl server = (com.igeekinc.indelible.indeliblefs.uniblock.server.RemoteCASServerConnectionImpl) obj;
	switch (opnum) {
	case 0: // addClientSessionAuthentication(SessionAuthentication)
	{
	    com.igeekinc.indelible.indeliblefs.security.SessionAuthentication $param_SessionAuthentication_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_SessionAuthentication_1 = (com.igeekinc.indelible.indeliblefs.security.SessionAuthentication) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.addClientSessionAuthentication($param_SessionAuthentication_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // addCollection(CASCollectionID)
	{
	    com.igeekinc.indelible.oid.CASCollectionID $param_CASCollectionID_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_CASCollectionID_1 = (com.igeekinc.indelible.oid.CASCollectionID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.server.RemoteCASCollectionConnection $result = server.addCollection($param_CASCollectionID_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // addConnectedServer(EntityID, EntityID)
	{
	    com.igeekinc.indelible.oid.EntityID $param_EntityID_1;
	    com.igeekinc.indelible.oid.EntityID $param_EntityID_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_EntityID_1 = (com.igeekinc.indelible.oid.EntityID) in.readObject();
		$param_EntityID_2 = (com.igeekinc.indelible.oid.EntityID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.addConnectedServer($param_EntityID_1, $param_EntityID_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // close()
	{
	    call.releaseInputStream();
	    server.close();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // commit()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.core.IndelibleFSTransaction $result = server.commit();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // createNewCollection()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.server.RemoteCASCollectionConnection $result = server.createNewCollection();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // createStoresForProperties(Properties)
	{
	    java.util.Properties $param_Properties_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Properties_1 = (java.util.Properties) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.createStoresForProperties($param_Properties_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // eventsAfterID(long)
	{
	    long $param_long_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_long_1 = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator $result = server.eventsAfterID($param_long_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // eventsAfterTime(long)
	{
	    long $param_long_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_long_1 = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator $result = server.eventsAfterTime($param_long_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 9: // getClientEntityAuthentication()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.security.EntityAuthentication $result = server.getClientEntityAuthentication();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 10: // getCollection(CASCollectionID)
	{
	    com.igeekinc.indelible.oid.CASCollectionID $param_CASCollectionID_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_CASCollectionID_1 = (com.igeekinc.indelible.oid.CASCollectionID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.server.RemoteCASCollectionConnection $result = server.getCollection($param_CASCollectionID_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 11: // getLastEventID()
	{
	    call.releaseInputStream();
	    long $result = server.getLastEventID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 12: // getLastReplicatedEventID(EntityID, CASCollectionID)
	{
	    com.igeekinc.indelible.oid.EntityID $param_EntityID_1;
	    com.igeekinc.indelible.oid.CASCollectionID $param_CASCollectionID_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_EntityID_1 = (com.igeekinc.indelible.oid.EntityID) in.readObject();
		$param_CASCollectionID_2 = (com.igeekinc.indelible.oid.CASCollectionID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    long $result = server.getLastReplicatedEventID($param_EntityID_1, $param_CASCollectionID_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 13: // getMoverAddresses(EntityID)
	{
	    com.igeekinc.indelible.oid.EntityID $param_EntityID_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_EntityID_1 = (com.igeekinc.indelible.oid.EntityID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.net.InetSocketAddress[] $result = server.getMoverAddresses($param_EntityID_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 14: // getMoverID()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.oid.EntityID $result = server.getMoverID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 15: // getSecurityServerID()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.oid.EntityID $result = server.getSecurityServerID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 16: // getServer()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.uniblock.remote.RemoteCASServer $result = server.getServer();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 17: // getServerEntityAuthentication()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.security.EntityAuthentication $result = server.getServerEntityAuthentication();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 18: // getServerEventsAfterEventID(long, int)
	{
	    long $param_long_1;
	    int $param_int_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_long_1 = in.readLong();
		$param_int_2 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator $result = server.getServerEventsAfterEventID($param_long_1, $param_int_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 19: // getServerID()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.oid.EntityID $result = server.getServerID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 20: // getSessionAuthentication()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.security.SessionAuthentication $result = server.getSessionAuthentication();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 21: // getTestDescriptor()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $result = server.getTestDescriptor();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 22: // isClosed()
	{
	    call.releaseInputStream();
	    boolean $result = server.isClosed();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 23: // listCollections()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.oid.CASCollectionID[] $result = server.listCollections();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 24: // retrieveMetaData(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $result = server.retrieveMetaData($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 25: // rollback()
	{
	    call.releaseInputStream();
	    server.rollback();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 26: // setupReverseMoverConnection(EntityID, InetAddress, int)
	{
	    com.igeekinc.indelible.oid.EntityID $param_EntityID_1;
	    java.net.InetAddress $param_InetAddress_2;
	    int $param_int_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_EntityID_1 = (com.igeekinc.indelible.oid.EntityID) in.readObject();
		$param_InetAddress_2 = (java.net.InetAddress) in.readObject();
		$param_int_3 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.setupReverseMoverConnection($param_EntityID_1, $param_InetAddress_2, $param_int_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 27: // startTransaction()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $result = server.startTransaction();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 28: // storeMetaData(String, NetworkDataDescriptor)
	{
	    java.lang.String $param_String_1;
	    com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $param_NetworkDataDescriptor_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_NetworkDataDescriptor_2 = (com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.storeMetaData($param_String_1, $param_NetworkDataDescriptor_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 29: // testReverseConnection(NetworkDataDescriptor)
	{
	    com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $param_NetworkDataDescriptor_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_NetworkDataDescriptor_1 = (com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.testReverseConnection($param_NetworkDataDescriptor_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
